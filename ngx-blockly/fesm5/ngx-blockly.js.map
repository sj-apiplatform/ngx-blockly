{"version":3,"file":"ngx-blockly.js","sources":["ng://ngx-blockly/lib/ngx-blockly/ngx-blockly.config.ts","ng://ngx-blockly/lib/ngx-blockly/ngx-blockly-generator.config.ts","ng://ngx-blockly/lib/ngx-blockly/ngx-blockly.component.ts","ng://ngx-blockly/lib/ngx-blockly/models/block.ts","ng://ngx-blockly/lib/ngx-blockly/models/custom-block.ts","ng://ngx-blockly/lib/ngx-blockly/models/xml-block.ts","ng://ngx-blockly/lib/ngx-blockly/models/category.ts","ng://ngx-blockly/lib/ngx-blockly/models/separator.ts","ng://ngx-blockly/lib/ngx-blockly/models/node.ts","ng://ngx-blockly/lib/ngx-blockly/models/block-mutator.ts","ng://ngx-blockly/lib/ngx-blockly/services/ngx-toolbox-builder.service.ts","ng://ngx-blockly/lib/ngx-blockly.module.ts"],"sourcesContent":["export class NgxBlocklyConfig {\n    collapse?: boolean; // Allows blocks to be collapsed or expanded. Defaults to true if the toolbox has categories, false otherwise.\n    comments?: boolean; // Allows blocks to have comments. Defaults to true if the toolbox has categories, false otherwise.\n    css?: boolean; // If false, don't inject CSS (providing CSS becomes the document's responsibility). Defaults to true.\n    disable?: boolean; // If false, don't inject CSS (providing CSS becomes the document's responsibility). Defaults to true.\n    grid?: {\n        spacing: number,\n        length: number,\n        colour: string,\n        snap: boolean\n    };\n    horizontalLayout?: boolean; // If true toolbox is horizontal, if false toolbox is vertical. Defaults to false.\n    maxBlocks?: number; // \tMaximum number of blocks that may be created. Useful for student exercises. Defaults to Infinity.\n    maxInstances?: object; // Map from block types to maximum number of blocks of that type that may be created. Undeclared types default to Infinity.\n    media?: string; // Path from page (or frame) to the Blockly media directory. Defaults to \"https://blockly-demo.appspot.com/static/media/\"\n    oneBasedIndex?: boolean; // If true list and string operations should index from 1, if false index from 0. Defaults to true.\n    readOnly?: boolean; // If true, prevent the user from editing. Supresses the toolbox and trashcan. Defaults to false.\n    rtl?: boolean; // If true, mirror the editor (for Arabic or Hebrew locales). Defaults to false.\n    scrollbars?: boolean; // Sets whether the workspace is scrollable or not. Defaults to true if the toolbox has categories, false otherwise\n    sounds?: boolean; // If false, don't play sounds (e.g. click and delete). Defaults to true.\n    theme?: any; // Defaults to classic theme if no theme is provided. (https://developers.google.com/blockly/guides/configure/web/themes)\n    toolbox?: string; // Tree structure of categories and blocks available to the user\n    toolboxPosition?: string; // If \"start\" toolbox is on top (if horizontal) or left (if vertical and LTR) or right (if vertical and RTL). If \"end\" toolbox is on opposite side. Defaults to \"start\".\n    trashcan?: boolean; // Displays or hides the trashcan. Defaults to true if the toolbox has categories, false otherwise.\n    maxTrashcanContents?: number; // Maximum number of deleted items that will appear in the trashcan flyout. '0' disables the feature. Defaults to '32'.\n    zoom?: {\n        controls: boolean,\n        wheel: boolean,\n        startScale: number,\n        maxScale: number,\n        minScale: number,\n        scaleSpeed: number\n    };\n\n}\n","export class NgxBlocklyGeneratorConfig {\n    dart?: boolean;\n    javascript?: boolean;\n    lua?: boolean;\n    php?: boolean;\n    python?: boolean;\n    xml?: boolean;\n}\n","import { AfterViewInit, Component, EventEmitter, HostListener, Input, OnInit, Output, OnChanges, SimpleChange } from '@angular/core';\nimport { NgxBlocklyConfig } from './ngx-blockly.config';\nimport { NgxBlocklyGeneratorConfig } from './ngx-blockly-generator.config';\nimport { CustomBlock } from './models/custom-block';\n\ndeclare var Blockly: any;\n\n@Component({\n    selector: 'ngx-blockly',\n    templateUrl: './ngx-blockly.component.html',\n    styleUrls: ['./ngx-blockly.component.css']\n})\nexport class NgxBlocklyComponent implements OnInit, AfterViewInit, OnChanges {\n\n    @Input() public config: NgxBlocklyConfig = {};\n    @Input() public generatorConfig: NgxBlocklyGeneratorConfig = {};\n    @Input() public customBlocks: CustomBlock[] = [];\n    @Output() public workspaceChange: EventEmitter<any> = new EventEmitter<any>();\n    @Output() public dartCode: EventEmitter<string> = new EventEmitter<string>();\n    @Output() public javascriptCode: EventEmitter<string> = new EventEmitter<string>();\n    @Output() public luaCode: EventEmitter<string> = new EventEmitter<string>();\n    @Output() public phpCode: EventEmitter<string> = new EventEmitter<string>();\n    @Output() public pythonCode: EventEmitter<string> = new EventEmitter<string>();\n    @Output() public xmlCode: EventEmitter<string> = new EventEmitter<string>();\n\n    public workspace: any;\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n        if (this.customBlocks) {\n            for (const customBlock of this.customBlocks) {\n                Blockly.Blocks[customBlock.type] = {\n                    init: function () {\n                        const block = new customBlock.class(customBlock.type, this, customBlock.blockMutator, ...customBlock.args);\n                        block.init(this);\n                        this.mixin({\n                                blockInstance: block\n                            }\n                        );\n                    }\n                };\n                if (typeof Blockly.Python !== 'undefined') {\n                    Blockly.Python[customBlock.type] = function (b) {\n                        return b.blockInstance.toPythonCode(b);\n                    };\n                }\n                if (typeof Blockly.Dart !== 'undefined') {\n                    Blockly.Dart[customBlock.type] = function (b) {\n                        return b.blockInstance.toDartCode(b);\n                    };\n                }\n                if (typeof Blockly.JavaScript !== 'undefined') {\n                    Blockly.JavaScript[customBlock.type] = function (b) {\n                        return b.blockInstance.toJavaScriptCode(b);\n                    };\n                }\n                if (typeof Blockly.Lua !== 'undefined') {\n                    Blockly.Lua[customBlock.type] = function (b) {\n                        return b.blockInstance.toLuaCode(b);\n                    };\n                }\n                if (typeof Blockly.PHP !== 'undefined') {\n                    Blockly.PHP[customBlock.type] = function (b) {\n                        return b.blockInstance.toPHPCode(b);\n                    };\n                }\n                if (customBlock.blockMutator) {\n                    const mutator_mixin: any = {\n                        mutationToDom: function () {\n                            return customBlock.blockMutator.mutationToDom.call(customBlock.blockMutator, this);\n                        },\n                        domToMutation: function (xmlElement: any) {\n                            customBlock.blockMutator.domToMutation.call(customBlock.blockMutator, this, xmlElement);\n                        }\n                    };\n                    if (customBlock.blockMutator.blockList && customBlock.blockMutator.blockList.length > 0) {\n                        mutator_mixin.decompose = function(workspace: any) {\n                            return customBlock.blockMutator.decompose.call(customBlock.blockMutator, this, workspace);\n                        };\n                        mutator_mixin.compose = function(topBlock: any) {\n                            customBlock.blockMutator.compose.call(customBlock.blockMutator, this, topBlock);\n                        };\n                        mutator_mixin.saveConnections = function(containerBlock: any) {\n                            customBlock.blockMutator.saveConnections.call(customBlock.blockMutator, this, containerBlock);\n                        };\n                    }\n                    Blockly.Extensions.unregister(customBlock.blockMutator.name);\n                    Blockly.Extensions.registerMutator(\n                        customBlock.blockMutator.name,\n                        mutator_mixin,\n                        function() {\n                            customBlock.blockMutator.afterBlockInit.call(customBlock.blockMutator, this);\n                        },\n                        customBlock.blockMutator.blockList\n                    );\n                }\n            }\n        }\n    }\n\n    ngAfterViewInit() {\n       this._init();\n    }\n\n    @HostListener('window:resize', ['$event'])\n    onResize(event) {\n        setTimeout(() => this.resize(), 200);\n    }\n\n    ngOnChanges(changes: {[propKey: string]: SimpleChange}) {\n        if (changes.config && !changes.config.firstChange) {\n            this._init();\n        }\n    }\n\n    public workspaceToCode(workspaceId: string) {\n        if (this.generatorConfig.dart) {\n           this.dartCode.emit(Blockly.Dart.workspaceToCode(Blockly.Workspace.getById(workspaceId)));\n        }\n        if (this.generatorConfig.javascript) {\n            this.javascriptCode.emit(Blockly.JavaScript.workspaceToCode(Blockly.Workspace.getById(workspaceId)));\n        }\n        if (this.generatorConfig.lua) {\n            this.luaCode.emit(Blockly.Lua.workspaceToCode(Blockly.Workspace.getById(workspaceId)));\n        }\n        if (this.generatorConfig.php) {\n            this.phpCode.emit(Blockly.PHP.workspaceToCode(Blockly.Workspace.getById(workspaceId)));\n        }\n        if (this.generatorConfig.python) {\n            this.pythonCode.emit(Blockly.Python.workspaceToCode(Blockly.Workspace.getById(workspaceId)));\n        }\n        if (this.generatorConfig.xml) {\n            this.xmlCode.emit(Blockly.Xml.domToPrettyText(Blockly.Xml.workspaceToDom(Blockly.Workspace.getById(workspaceId))));\n        }\n    }\n\n    public toXml(): string {\n        return Blockly.Xml.domToPrettyText(Blockly.Xml.workspaceToDom(this.workspace));\n    }\n\n    public fromXml(xml: string) {\n        Blockly.Xml.clearWorkspaceAndLoadFromXml(Blockly.Xml.textToDom(xml), this.workspace);\n    }\n\n    public appendFromXml(xml: string) {\n        Blockly.Xml.appendDomToWorkspace(Blockly.Xml.textToDom(xml), this.workspace);\n    }\n\n    protected resize() {\n        Blockly.svgResize(this.workspace);\n    }\n\n    private _init() {\n        let xml: string;\n        if (this.workspace) {\n            xml = this.toXml();\n            this.workspace.dispose();\n        }\n        this.workspace = Blockly.inject('blockly', this.config);\n        this.workspace.addChangeListener(($event) => {\n            this._onWorkspaceChange($event);\n        });\n        if (xml) {\n            this.fromXml(xml);\n        }\n        this.resize();\n    }\n\n    private _onWorkspaceChange($event: any) {\n        this.workspaceChange.emit($event);\n        this.workspaceToCode($event.workspaceId);\n    }\n}\n","export abstract class Block {\n\n    private _type: string;\n    private _class: any;\n\n    constructor(type: string) {\n        this._type = type;\n    }\n\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value;\n    }\n\n    get class(): any {\n        return this._class;\n    }\n\n    set class(value: any) {\n        this._class = value;\n    }\n\n    public abstract toXML();\n}\n","import { BlockMutator } from './block-mutator';\nimport { Block } from './block';\n\ndeclare var Blockly: any;\n\nexport abstract class CustomBlock extends Block {\n\n    private _block: any;\n    private _blockMutator: BlockMutator;\n    private _args: any[];\n\n\n    constructor(type: string, block: any, blockMutator: BlockMutator, ...args: any[]) {\n        super(type);\n        this._block = block;\n        this._blockMutator = blockMutator;\n        this._args = args;\n    }\n\n    public init(block: any) {\n        this._block = block;\n        this.defineBlock();\n        this.block.setOnChange(function (event) {\n            this.blockInstance.onChange(event);\n        });\n    }\n\n    public abstract defineBlock();\n\n    public onChange(changeEvent: any) {\n        // nothing to do\n    }\n\n    public toXML(): string {\n        return `<block type=\"${this.type}\"></block>`;\n    }\n\n    public toDartCode(block: CustomBlock): string | any[] {\n        return 'Not implemented';\n    }\n\n    public toJavaScriptCode(block: CustomBlock): string | any[] {\n        return 'Not implemented';\n    }\n\n    public toLuaCode(block: CustomBlock): string | any[] {\n        return 'Not implemented';\n    }\n\n    public toPHPCode(block: CustomBlock): string | any[] {\n        return 'Not implemented';\n    }\n\n    public toPythonCode(block: CustomBlock): string | any[] {\n        return 'Not implemented';\n    }\n\n    get block() {\n        return this._block;\n    }\n\n    set block(value) {\n        this._block = value;\n    }\n\n    get blockMutator(): BlockMutator {\n        return this._blockMutator;\n    }\n\n    set blockMutator(value: BlockMutator) {\n        this._blockMutator = value;\n    }\n\n    get args(): any[] {\n        return this._args;\n    }\n\n    set args(value: any[]) {\n        this._args = value;\n    }\n}\n","import { Block } from './block';\n\nexport class XmlBlock extends Block {\n\n    private _values: Value[] = [];\n    private _field: Field;\n\n    constructor(type: string) {\n        super(type);\n    }\n\n    get values(): Value[] {\n        return this._values;\n    }\n\n    set values(value: Value[]) {\n        this._values = value;\n    }\n\n    get field(): Field {\n        return this._field;\n    }\n\n    set field(value: Field) {\n        this._field = value;\n    }\n\n    public toXML(): string {\n        let xml = `<block type=\"${this.type}\">`;\n\n        for (const value of this.values) {\n            xml += value.toXML();\n        }\n        xml += this.field ? this.field.toXML() : '';\n        xml += '</block>';\n        return xml;\n    }\n}\n\nexport class Value {\n    private _name: string;\n    private _shadow: XmlBlock;\n    private _block: XmlBlock;\n\n    constructor(name: string, shadow: XmlBlock, block: XmlBlock) {\n        this._name = name;\n        this._shadow = shadow;\n        this._block = block;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    set name(value: string) {\n        this._name = value;\n    }\n\n    get shadow(): XmlBlock {\n        return this._shadow;\n    }\n\n    set shadow(value: XmlBlock) {\n        this._shadow = value;\n    }\n\n    get block(): XmlBlock {\n        return this._block;\n    }\n\n    set block(value: XmlBlock) {\n        this._block = value;\n    }\n\n    public toXML(): string {\n        return `<value name=\"${this.name}\">` +\n        this.block ? this.block.toXML() : '' +\n        this.shadow ? this.shadow.toXML() : '' +\n            '</value>';\n    }\n}\n\nexport class Field {\n    private _name: string;\n    private _value: string;\n\n    constructor(name: string, value: string) {\n        this._name = name;\n        this._value = value;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    set name(value: string) {\n        this._name = value;\n    }\n\n    get value(): string {\n        return this._value;\n    }\n\n    set value(value: string) {\n        this._value = value;\n    }\n\n    public toXML(): string {\n        return `<field name=\"${this.name}\">` + this.value + '</field>';\n    }\n}\n","import { Block } from './block';\nimport { Node } from './node';\n\nexport class Category implements Node {\n\n    private _blocks: Block[];\n    private _categories: Category[];\n    private _colour: string;\n    private _name: string;\n    private _custom: string;\n    private _style: string;\n\n    constructor(name: string,\n                colour: string,\n                blocks?: Block[],\n                categories?: Category[],\n                custom?: string,\n                style?: string) {\n        this._name = name;\n        this._colour = colour;\n        this._blocks = blocks ? blocks : [];\n        this._categories = categories ? categories : [];\n        this._custom = custom;\n        this._style = style;\n    }\n\n    get blocks(): Block[] {\n        return this._blocks;\n    }\n\n    set blocks(value: Block[]) {\n        this._blocks = value;\n    }\n\n    get categories(): Category[] {\n        return this._categories;\n    }\n\n    set categories(value: Category[]) {\n        this._categories = value;\n    }\n\n    get colour(): string {\n        return this._colour;\n    }\n\n    set colour(value: string) {\n        this._colour = value;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    set name(value: string) {\n        this._name = value;\n    }\n\n    get custom(): string {\n        return this._custom;\n    }\n\n    set custom(value: string) {\n        this._custom = value;\n    }\n\n    get style(): string {\n        return this._style;\n    }\n\n    set style(value: string) {\n        this._style = value;\n    }\n\n    public toXML(): string {\n        let xml = `<category name=\"${this._name}\" `;\n\n        if (this.style === undefined) {\n            xml += `colour=\"${this._colour}\" `;\n        } else {\n            xml += `categorystyle=\"${this._style}\" `;\n        }\n\n        xml += this.custom ? ` custom=\"${this._custom}\">` : '>';\n\n        for (const category of this._categories) {\n            xml += category.toXML();\n        }\n\n        for (const block of this._blocks) {\n            xml += block.toXML();\n        }\n        xml += '</category>';\n\n        return xml;\n    }\n}\n","import { Node } from './node';\n\nexport class Separator implements Node {\n    public toXML(): string {\n        return '<sep></sep>';\n    }\n}\n","export interface Node {\n    toXML(): string;\n}\n","\nexport abstract class BlockMutator {\n\n    private _name: string;\n    private _blockList: string[];\n\n    constructor(name: string, blockList: string[] = null) {\n        this._name = name;\n        this._blockList = blockList;\n    }\n\n    public abstract mutationToDom(block: any);\n\n    public abstract domToMutation(block: any, xmlElement: any);\n\n    public abstract decompose(block: any, workspace: any);\n\n    public abstract compose(block: any, topBlock: any);\n\n    public abstract saveConnections(block: any, containerBlock: any);\n\n    public abstract afterBlockInit(block: any);\n\n    get name(): string {\n        return this._name;\n    }\n\n    set name(value: string) {\n        this._name = value;\n    }\n\n    get blockList(): string[] {\n        return this._blockList;\n    }\n\n    set blockList(value: string[]) {\n        this._blockList = value;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Category } from '../models/category';\nimport { XmlBlock } from '../models/xml-block';\nimport { Node } from '../models/node';\n\nexport const LOGIC_CATEGORY: Category = new Category('Logic', '%{BKY_LOGIC_HUE}', [\n    new XmlBlock('controls_if'),\n    new XmlBlock('logic_compare'),\n    new XmlBlock('logic_operation'),\n    new XmlBlock('logic_negate'),\n    new XmlBlock('logic_boolean'),\n    new XmlBlock('logic_null'),\n    new XmlBlock('logic_ternary'),\n]);\n\nexport const LOOP_CATEGORY: Category = new Category('Loops', '%{BKY_LOOPS_HUE}', [\n    new XmlBlock('controls_repeat_ext'),\n    new XmlBlock('controls_whileUntil'),\n    new XmlBlock('controls_for'),\n    new XmlBlock('controls_forEach'),\n    new XmlBlock('controls_flow_statements'),\n    new XmlBlock('controls_flow_statements')\n]);\n\n\nexport const MATH_CATEGORY: Category = new Category('Math', '%{BKY_MATH_HUE}', [\n    new XmlBlock('math_number'),\n    new XmlBlock('math_arithmetic'),\n    new XmlBlock('math_single'),\n    new XmlBlock('math_trig'),\n    new XmlBlock('math_constant'),\n    new XmlBlock('math_number_property'),\n    new XmlBlock('math_round'),\n    new XmlBlock('math_on_list'),\n    new XmlBlock('math_modulo'),\n    new XmlBlock('math_constrain'),\n    new XmlBlock('math_random_int'),\n    new XmlBlock('math_random_float'),\n    new XmlBlock('math_atan2')\n]);\n\nexport const TEXT_CATEGORY: Category = new Category('Text', '%{BKY_TEXTS_HUE}', [\n    new XmlBlock('text'),\n    new XmlBlock('text_join'),\n    new XmlBlock('text_append'),\n    new XmlBlock('text_length'),\n    new XmlBlock('text_isEmpty'),\n    new XmlBlock('text_indexOf'),\n    new XmlBlock('text_charAt'),\n    new XmlBlock('text_getSubstring'),\n    new XmlBlock('text_changeCase'),\n    new XmlBlock('text_trim'),\n    new XmlBlock('text_print'),\n    new XmlBlock('text_prompt_ext')\n]);\n\nexport const LISTS_CATEGORY: Category = new Category('Lists', '%{BKY_LISTS_HUE}', [\n    new XmlBlock('lists_create_with'),\n    new XmlBlock('lists_create_with'),\n    new XmlBlock('lists_repeat'),\n    new XmlBlock('lists_length'),\n    new XmlBlock('lists_isEmpty'),\n    new XmlBlock('lists_indexOf'),\n    new XmlBlock('lists_getIndex'),\n    new XmlBlock('lists_setIndex'),\n    new XmlBlock('lists_getSublist'),\n    new XmlBlock('lists_split'),\n    new XmlBlock('lists_sort'),\n]);\n\nexport const COLOUR_CATEGORY: Category = new Category('Colours', '%{BKY_COLOUR_HUE}', [\n    new XmlBlock('colour_picker'),\n    new XmlBlock('colour_random'),\n    new XmlBlock('colour_random'),\n    new XmlBlock('colour_blend')\n]);\n\nexport const VARIABLES_CATEGORY: Category = new Category('Variables', '%{BKY_VARIABLES_HUE}', [], [], 'VARIABLE');\n\nexport const FUNCTIONS_CATEGORY: Category = new Category('Functions', '%{BKY_PROCEDURES_HUE}', [], [], 'PROCEDURE');\n\n@Injectable()\nexport class NgxToolboxBuilderService {\n\n    private _nodes: Node[];\n\n    public build(): string {\n        let xml = '<xml id=\"toolbox\" style=\"display: none\">';\n        if (this._nodes) {\n            for (const node of this._nodes) {\n                xml += node.toXML();\n            }\n        }\n        xml += '</xml>';\n        return xml;\n    }\n\n    get nodes(): Node[] {\n        return this._nodes;\n    }\n\n    set nodes(value: Node[]) {\n        this._nodes = value;\n    }\n}\n","import { NgModule, NO_ERRORS_SCHEMA } from '@angular/core';\nimport { NgxBlocklyComponent } from './ngx-blockly/ngx-blockly.component';\nimport { NgxToolboxBuilderService } from './ngx-blockly/services/ngx-toolbox-builder.service';\n\n@NgModule({\n    declarations: [NgxBlocklyComponent],\n    imports: [],\n    exports: [NgxBlocklyComponent],\n    providers: [NgxToolboxBuilderService],\n    schemas: [NO_ERRORS_SCHEMA]\n})\nexport class NgxBlocklyModule {\n}\n"],"names":["tslib_1.__values","tslib_1.__extends"],"mappings":";;;;;;;AAAA;IAAA;KAkCC;IAAD,uBAAC;CAAA,IAAA;;;IAjCG,oCAAmB;;IACnB,oCAAmB;;IACnB,+BAAc;;IACd,mCAAkB;;IAClB,gCAKE;;IACF,4CAA2B;;IAC3B,qCAAmB;;IACnB,wCAAsB;;IACtB,iCAAe;;IACf,yCAAwB;;IACxB,oCAAmB;;IACnB,+BAAc;;IACd,sCAAqB;;IACrB,kCAAiB;;IACjB,iCAAY;;IACZ,mCAAiB;;IACjB,2CAAyB;;IACzB,oCAAmB;;IACnB,+CAA6B;;IAC7B,gCAOE;;;;;;;AChCN;IAAA;KAOC;IAAD,gCAAC;CAAA,IAAA;;;IANG,yCAAe;;IACf,+CAAqB;;IACrB,wCAAc;;IACd,wCAAc;;IACd,2CAAiB;;IACjB,wCAAc;;;;;;;;ICqBd;QAbgB,WAAM,GAAqB,EAAE,CAAC;QAC9B,oBAAe,GAA8B,EAAE,CAAC;QAChD,iBAAY,GAAkB,EAAE,CAAC;QAChC,oBAAe,GAAsB,IAAI,YAAY,EAAO,CAAC;QAC7D,aAAQ,GAAyB,IAAI,YAAY,EAAU,CAAC;QAC5D,mBAAc,GAAyB,IAAI,YAAY,EAAU,CAAC;QAClE,YAAO,GAAyB,IAAI,YAAY,EAAU,CAAC;QAC3D,YAAO,GAAyB,IAAI,YAAY,EAAU,CAAC;QAC3D,eAAU,GAAyB,IAAI,YAAY,EAAU,CAAC;QAC9D,YAAO,GAAyB,IAAI,YAAY,EAAU,CAAC;KAK3E;;;;IAED,sCAAQ;;;IAAR;;QACI,IAAI,IAAI,CAAC,YAAY,EAAE;oCACR,WAAW;gBAClB,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG;oBAC/B,IAAI;;;oBAAE;;;4BACI,KAAK,QAAO,CAAA,KAAA,WAAW,CAAC,KAAK,mCAAC,WAAW,CAAC,IAAI,EAAE,IAAI,EAAE,WAAW,CAAC,YAAY,GAAK,WAAW,CAAC,IAAI,KAAC;wBAC1G,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBACjB,IAAI,CAAC,KAAK,CAAC;4BACH,aAAa,EAAE,KAAK;yBACvB,CACJ,CAAC;qBACL,CAAA;iBACJ,CAAC;gBACF,IAAI,OAAO,OAAO,CAAC,MAAM,KAAK,WAAW,EAAE;oBACvC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC;;;;oBAAG,UAAU,CAAC;wBAC1C,OAAO,CAAC,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;qBAC1C,CAAA,CAAC;iBACL;gBACD,IAAI,OAAO,OAAO,CAAC,IAAI,KAAK,WAAW,EAAE;oBACrC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;;;;oBAAG,UAAU,CAAC;wBACxC,OAAO,CAAC,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;qBACxC,CAAA,CAAC;iBACL;gBACD,IAAI,OAAO,OAAO,CAAC,UAAU,KAAK,WAAW,EAAE;oBAC3C,OAAO,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC;;;;oBAAG,UAAU,CAAC;wBAC9C,OAAO,CAAC,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;qBAC9C,CAAA,CAAC;iBACL;gBACD,IAAI,OAAO,OAAO,CAAC,GAAG,KAAK,WAAW,EAAE;oBACpC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC;;;;oBAAG,UAAU,CAAC;wBACvC,OAAO,CAAC,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;qBACvC,CAAA,CAAC;iBACL;gBACD,IAAI,OAAO,OAAO,CAAC,GAAG,KAAK,WAAW,EAAE;oBACpC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC;;;;oBAAG,UAAU,CAAC;wBACvC,OAAO,CAAC,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;qBACvC,CAAA,CAAC;iBACL;gBACD,IAAI,WAAW,CAAC,YAAY,EAAE;;wBACpB,aAAa,GAAQ;wBACvB,aAAa;;;wBAAE;4BACX,OAAO,WAAW,CAAC,YAAY,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;yBACtF,CAAA;wBACD,aAAa;;;;wBAAE,UAAU,UAAe;4BACpC,WAAW,CAAC,YAAY,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;yBAC3F,CAAA;qBACJ;oBACD,IAAI,WAAW,CAAC,YAAY,CAAC,SAAS,IAAI,WAAW,CAAC,YAAY,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;wBACrF,aAAa,CAAC,SAAS;;;;wBAAG,UAAS,SAAc;4BAC7C,OAAO,WAAW,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;yBAC7F,CAAA,CAAC;wBACF,aAAa,CAAC,OAAO;;;;wBAAG,UAAS,QAAa;4BAC1C,WAAW,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;yBACnF,CAAA,CAAC;wBACF,aAAa,CAAC,eAAe;;;;wBAAG,UAAS,cAAmB;4BACxD,WAAW,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,IAAI,EAAE,cAAc,CAAC,CAAC;yBACjG,CAAA,CAAC;qBACL;oBACD,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;oBAC7D,OAAO,CAAC,UAAU,CAAC,eAAe,CAC9B,WAAW,CAAC,YAAY,CAAC,IAAI,EAC7B,aAAa;;;oBACb;wBACI,WAAW,CAAC,YAAY,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;qBAChF,GACD,WAAW,CAAC,YAAY,CAAC,SAAS,CACrC,CAAC;iBACL;;;gBAjEL,KAA0B,IAAA,KAAAA,SAAA,IAAI,CAAC,YAAY,CAAA,gBAAA;oBAAtC,IAAM,WAAW,WAAA;4BAAX,WAAW;iBAkErB;;;;;;;;;SACJ;KACJ;;;;IAED,6CAAe;;;IAAf;QACG,IAAI,CAAC,KAAK,EAAE,CAAC;KACf;;;;;IAGD,sCAAQ;;;;IADR,UACS,KAAK;QADd,iBAGC;QADG,UAAU;;;QAAC,cAAM,OAAA,KAAI,CAAC,MAAM,EAAE,GAAA,GAAE,GAAG,CAAC,CAAC;KACxC;;;;;IAED,yCAAW;;;;IAAX,UAAY,OAA0C;QAClD,IAAI,OAAO,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE;YAC/C,IAAI,CAAC,KAAK,EAAE,CAAC;SAChB;KACJ;;;;;IAEM,6CAAe;;;;IAAtB,UAAuB,WAAmB;QACtC,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE;YAC5B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;SAC3F;QACD,IAAI,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE;YACjC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,eAAe,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;SACxG;QACD,IAAI,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE;YAC1B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;SAC1F;QACD,IAAI,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE;YAC1B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;SAC1F;QACD,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE;YAC7B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;SAChG;QACD,IAAI,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE;YAC1B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;SACtH;KACJ;;;;IAEM,mCAAK;;;IAAZ;QACI,OAAO,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;KAClF;;;;;IAEM,qCAAO;;;;IAAd,UAAe,GAAW;QACtB,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;KACxF;;;;;IAEM,2CAAa;;;;IAApB,UAAqB,GAAW;QAC5B,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;KAChF;;;;;IAES,oCAAM;;;;IAAhB;QACI,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KACrC;;;;;IAEO,mCAAK;;;;IAAb;QAAA,iBAcC;;YAbO,GAAW;QACf,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,GAAG,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;YACnB,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;SAC5B;QACD,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QACxD,IAAI,CAAC,SAAS,CAAC,iBAAiB;;;;QAAC,UAAC,MAAM;YACpC,KAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;SACnC,EAAC,CAAC;QACH,IAAI,GAAG,EAAE;YACL,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;SACrB;QACD,IAAI,CAAC,MAAM,EAAE,CAAC;KACjB;;;;;;IAEO,gDAAkB;;;;;IAA1B,UAA2B,MAAW;QAClC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAClC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;KAC5C;;gBAtKJ,SAAS,SAAC;oBACP,QAAQ,EAAE,aAAa;oBACvB,8HAA2C;;iBAE9C;;;;;yBAGI,KAAK;kCACL,KAAK;+BACL,KAAK;kCACL,MAAM;2BACN,MAAM;iCACN,MAAM;0BACN,MAAM;0BACN,MAAM;6BACN,MAAM;0BACN,MAAM;2BAmFN,YAAY,SAAC,eAAe,EAAE,CAAC,QAAQ,CAAC;;IAoE7C,0BAAC;CAvKD,IAuKC;;;IAhKG,qCAA8C;;IAC9C,8CAAgE;;IAChE,2CAAiD;;IACjD,8CAA8E;;IAC9E,uCAA6E;;IAC7E,6CAAmF;;IACnF,sCAA4E;;IAC5E,sCAA4E;;IAC5E,yCAA+E;;IAC/E,sCAA4E;;IAE5E,wCAAsB;;;;;;;;;;ACzB1B;;;;IAKI,eAAY,IAAY;QACpB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;KACrB;IAED,sBAAI,uBAAI;;;;QAAR;YACI,OAAO,IAAI,CAAC,KAAK,CAAC;SACrB;;;;;QAED,UAAS,KAAa;YAClB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACtB;;;OAJA;IAMD,sBAAI,wBAAK;;;;QAAT;YACI,OAAO,IAAI,CAAC,MAAM,CAAC;SACtB;;;;;QAED,UAAU,KAAU;YAChB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;SACvB;;;OAJA;IAOL,YAAC;CAAA,IAAA;;;;;;IAxBG,sBAAsB;;;;;IACtB,uBAAoB;;;;;IAsBpB,wCAAwB;;;;;;;;;;ACpB5B;;;;IAA0CC,+BAAK;IAO3C,qBAAY,IAAY,EAAE,KAAU,EAAE,YAA0B;QAAE,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,6BAAc;;QAAhF,YACI,kBAAM,IAAI,CAAC,SAId;QAHG,KAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,KAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC;;KACrB;;;;;IAEM,0BAAI;;;;IAAX,UAAY,KAAU;QAClB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,KAAK,CAAC,WAAW;;;;QAAC,UAAU,KAAK;YAClC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;SACtC,EAAC,CAAC;KACN;;;;;IAIM,8BAAQ;;;;IAAf,UAAgB,WAAgB;;KAE/B;;;;IAEM,2BAAK;;;IAAZ;QACI,OAAO,mBAAgB,IAAI,CAAC,IAAI,gBAAY,CAAC;KAChD;;;;;IAEM,gCAAU;;;;IAAjB,UAAkB,KAAkB;QAChC,OAAO,iBAAiB,CAAC;KAC5B;;;;;IAEM,sCAAgB;;;;IAAvB,UAAwB,KAAkB;QACtC,OAAO,iBAAiB,CAAC;KAC5B;;;;;IAEM,+BAAS;;;;IAAhB,UAAiB,KAAkB;QAC/B,OAAO,iBAAiB,CAAC;KAC5B;;;;;IAEM,+BAAS;;;;IAAhB,UAAiB,KAAkB;QAC/B,OAAO,iBAAiB,CAAC;KAC5B;;;;;IAEM,kCAAY;;;;IAAnB,UAAoB,KAAkB;QAClC,OAAO,iBAAiB,CAAC;KAC5B;IAED,sBAAI,8BAAK;;;;QAAT;YACI,OAAO,IAAI,CAAC,MAAM,CAAC;SACtB;;;;;QAED,UAAU,KAAK;YACX,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;SACvB;;;OAJA;IAMD,sBAAI,qCAAY;;;;QAAhB;YACI,OAAO,IAAI,CAAC,aAAa,CAAC;SAC7B;;;;;QAED,UAAiB,KAAmB;YAChC,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;SAC9B;;;OAJA;IAMD,sBAAI,6BAAI;;;;QAAR;YACI,OAAO,IAAI,CAAC,KAAK,CAAC;SACrB;;;;;QAED,UAAS,KAAY;YACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACtB;;;OAJA;IAKL,kBAAC;CA3ED,CAA0C,KAAK,GA2E9C;;;;;;IAzEG,6BAAoB;;;;;IACpB,oCAAoC;;;;;IACpC,4BAAqB;;;;;IAkBrB,oDAA8B;;;;;;;;ICzBJA,4BAAK;IAK/B,kBAAY,IAAY;QAAxB,YACI,kBAAM,IAAI,CAAC,SACd;QALO,aAAO,GAAY,EAAE,CAAC;;KAK7B;IAED,sBAAI,4BAAM;;;;QAAV;YACI,OAAO,IAAI,CAAC,OAAO,CAAC;SACvB;;;;;QAED,UAAW,KAAc;YACrB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;SACxB;;;OAJA;IAMD,sBAAI,2BAAK;;;;QAAT;YACI,OAAO,IAAI,CAAC,MAAM,CAAC;SACtB;;;;;QAED,UAAU,KAAY;YAClB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;SACvB;;;OAJA;;;;IAMM,wBAAK;;;IAAZ;;;YACQ,GAAG,GAAG,mBAAgB,IAAI,CAAC,IAAI,QAAI;;YAEvC,KAAoB,IAAA,KAAAD,SAAA,IAAI,CAAC,MAAM,CAAA,gBAAA,4BAAE;gBAA5B,IAAM,KAAK,WAAA;gBACZ,GAAG,IAAI,KAAK,CAAC,KAAK,EAAE,CAAC;aACxB;;;;;;;;;QACD,GAAG,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC;QAC5C,GAAG,IAAI,UAAU,CAAC;QAClB,OAAO,GAAG,CAAC;KACd;IACL,eAAC;CAnCD,CAA8B,KAAK,GAmClC;;;;;;IAjCG,2BAA8B;;;;;IAC9B,0BAAsB;;AAkC1B;IAKI,eAAY,IAAY,EAAE,MAAgB,EAAE,KAAe;QACvD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;KACvB;IAED,sBAAI,uBAAI;;;;QAAR;YACI,OAAO,IAAI,CAAC,KAAK,CAAC;SACrB;;;;;QAED,UAAS,KAAa;YAClB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACtB;;;OAJA;IAMD,sBAAI,yBAAM;;;;QAAV;YACI,OAAO,IAAI,CAAC,OAAO,CAAC;SACvB;;;;;QAED,UAAW,KAAe;YACtB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;SACxB;;;OAJA;IAMD,sBAAI,wBAAK;;;;QAAT;YACI,OAAO,IAAI,CAAC,MAAM,CAAC;SACtB;;;;;QAED,UAAU,KAAe;YACrB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;SACvB;;;OAJA;;;;IAMM,qBAAK;;;IAAZ;QACI,OAAO,mBAAgB,IAAI,CAAC,IAAI,QAAI;YACpC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,EAAE;YACpC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,EAAE;YAClC,UAAU,CAAC;KAClB;IACL,YAAC;CAAA,IAAA;;;;;;IAxCG,sBAAsB;;;;;IACtB,wBAA0B;;;;;IAC1B,uBAAyB;;AAwC7B;IAII,eAAY,IAAY,EAAE,KAAa;QACnC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;KACvB;IAED,sBAAI,uBAAI;;;;QAAR;YACI,OAAO,IAAI,CAAC,KAAK,CAAC;SACrB;;;;;QAED,UAAS,KAAa;YAClB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACtB;;;OAJA;IAMD,sBAAI,wBAAK;;;;QAAT;YACI,OAAO,IAAI,CAAC,MAAM,CAAC;SACtB;;;;;QAED,UAAU,KAAa;YACnB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;SACvB;;;OAJA;;;;IAMM,qBAAK;;;IAAZ;QACI,OAAO,mBAAgB,IAAI,CAAC,IAAI,QAAI,GAAG,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC;KAClE;IACL,YAAC;CAAA,IAAA;;;;;;IA3BG,sBAAsB;;;;;IACtB,uBAAuB;;;;;;;;ICxEvB,kBAAY,IAAY,EACZ,MAAc,EACd,MAAgB,EAChB,UAAuB,EACvB,MAAe,EACf,KAAc;QACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,OAAO,GAAG,MAAM,GAAG,MAAM,GAAG,EAAE,CAAC;QACpC,IAAI,CAAC,WAAW,GAAG,UAAU,GAAG,UAAU,GAAG,EAAE,CAAC;QAChD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;KACvB;IAED,sBAAI,4BAAM;;;;QAAV;YACI,OAAO,IAAI,CAAC,OAAO,CAAC;SACvB;;;;;QAED,UAAW,KAAc;YACrB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;SACxB;;;OAJA;IAMD,sBAAI,gCAAU;;;;QAAd;YACI,OAAO,IAAI,CAAC,WAAW,CAAC;SAC3B;;;;;QAED,UAAe,KAAiB;YAC5B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;SAC5B;;;OAJA;IAMD,sBAAI,4BAAM;;;;QAAV;YACI,OAAO,IAAI,CAAC,OAAO,CAAC;SACvB;;;;;QAED,UAAW,KAAa;YACpB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;SACxB;;;OAJA;IAMD,sBAAI,0BAAI;;;;QAAR;YACI,OAAO,IAAI,CAAC,KAAK,CAAC;SACrB;;;;;QAED,UAAS,KAAa;YAClB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACtB;;;OAJA;IAMD,sBAAI,4BAAM;;;;QAAV;YACI,OAAO,IAAI,CAAC,OAAO,CAAC;SACvB;;;;;QAED,UAAW,KAAa;YACpB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;SACxB;;;OAJA;IAMD,sBAAI,2BAAK;;;;QAAT;YACI,OAAO,IAAI,CAAC,MAAM,CAAC;SACtB;;;;;QAED,UAAU,KAAa;YACnB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;SACvB;;;OAJA;;;;IAMM,wBAAK;;;IAAZ;;;YACQ,GAAG,GAAG,sBAAmB,IAAI,CAAC,KAAK,QAAI;QAE3C,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE;YAC1B,GAAG,IAAI,cAAW,IAAI,CAAC,OAAO,QAAI,CAAC;SACtC;aAAM;YACH,GAAG,IAAI,qBAAkB,IAAI,CAAC,MAAM,QAAI,CAAC;SAC5C;QAED,GAAG,IAAI,IAAI,CAAC,MAAM,GAAG,eAAY,IAAI,CAAC,OAAO,QAAI,GAAG,GAAG,CAAC;;YAExD,KAAuB,IAAA,KAAAA,SAAA,IAAI,CAAC,WAAW,CAAA,gBAAA,4BAAE;gBAApC,IAAM,QAAQ,WAAA;gBACf,GAAG,IAAI,QAAQ,CAAC,KAAK,EAAE,CAAC;aAC3B;;;;;;;;;;YAED,KAAoB,IAAA,KAAAA,SAAA,IAAI,CAAC,OAAO,CAAA,gBAAA,4BAAE;gBAA7B,IAAM,KAAK,WAAA;gBACZ,GAAG,IAAI,KAAK,CAAC,KAAK,EAAE,CAAC;aACxB;;;;;;;;;QACD,GAAG,IAAI,aAAa,CAAC;QAErB,OAAO,GAAG,CAAC;KACd;IACL,eAAC;CAAA,IAAA;;;;;;IA3FG,2BAAyB;;;;;IACzB,+BAAgC;;;;;IAChC,2BAAwB;;;;;IACxB,yBAAsB;;;;;IACtB,2BAAwB;;;;;IACxB,0BAAuB;;;;;;;ACR3B;IAAA;KAIC;;;;IAHU,yBAAK;;;IAAZ;QACI,OAAO,aAAa,CAAC;KACxB;IACL,gBAAC;CAAA;;;;;;;;;ACND,mBAEC;;;;;IADG,uCAAgB;;;;;;;;;;ACApB;;;;IAKI,sBAAY,IAAY,EAAE,SAA0B;QAA1B,0BAAA,EAAA,gBAA0B;QAChD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;KAC/B;IAcD,sBAAI,8BAAI;;;;QAAR;YACI,OAAO,IAAI,CAAC,KAAK,CAAC;SACrB;;;;;QAED,UAAS,KAAa;YAClB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACtB;;;OAJA;IAMD,sBAAI,mCAAS;;;;QAAb;YACI,OAAO,IAAI,CAAC,UAAU,CAAC;SAC1B;;;;;QAED,UAAc,KAAe;YACzB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;SAC3B;;;OAJA;IAKL,mBAAC;CAAA,IAAA;;;;;;IAnCG,6BAAsB;;;;;IACtB,kCAA6B;;;;;;IAO7B,4DAA0C;;;;;;;IAE1C,wEAA2D;;;;;;;IAE3D,mEAAsD;;;;;;;IAEtD,gEAAmD;;;;;;;IAEnD,8EAAiE;;;;;;IAEjE,6DAA2C;;;;;;;;AChB/C,IAAa,cAAc,GAAa,IAAI,QAAQ,CAAC,OAAO,EAAE,kBAAkB,EAAE;IAC9E,IAAI,QAAQ,CAAC,aAAa,CAAC;IAC3B,IAAI,QAAQ,CAAC,eAAe,CAAC;IAC7B,IAAI,QAAQ,CAAC,iBAAiB,CAAC;IAC/B,IAAI,QAAQ,CAAC,cAAc,CAAC;IAC5B,IAAI,QAAQ,CAAC,eAAe,CAAC;IAC7B,IAAI,QAAQ,CAAC,YAAY,CAAC;IAC1B,IAAI,QAAQ,CAAC,eAAe,CAAC;CAChC,CAAC;;AAEF,IAAa,aAAa,GAAa,IAAI,QAAQ,CAAC,OAAO,EAAE,kBAAkB,EAAE;IAC7E,IAAI,QAAQ,CAAC,qBAAqB,CAAC;IACnC,IAAI,QAAQ,CAAC,qBAAqB,CAAC;IACnC,IAAI,QAAQ,CAAC,cAAc,CAAC;IAC5B,IAAI,QAAQ,CAAC,kBAAkB,CAAC;IAChC,IAAI,QAAQ,CAAC,0BAA0B,CAAC;IACxC,IAAI,QAAQ,CAAC,0BAA0B,CAAC;CAC3C,CAAC;;AAGF,IAAa,aAAa,GAAa,IAAI,QAAQ,CAAC,MAAM,EAAE,iBAAiB,EAAE;IAC3E,IAAI,QAAQ,CAAC,aAAa,CAAC;IAC3B,IAAI,QAAQ,CAAC,iBAAiB,CAAC;IAC/B,IAAI,QAAQ,CAAC,aAAa,CAAC;IAC3B,IAAI,QAAQ,CAAC,WAAW,CAAC;IACzB,IAAI,QAAQ,CAAC,eAAe,CAAC;IAC7B,IAAI,QAAQ,CAAC,sBAAsB,CAAC;IACpC,IAAI,QAAQ,CAAC,YAAY,CAAC;IAC1B,IAAI,QAAQ,CAAC,cAAc,CAAC;IAC5B,IAAI,QAAQ,CAAC,aAAa,CAAC;IAC3B,IAAI,QAAQ,CAAC,gBAAgB,CAAC;IAC9B,IAAI,QAAQ,CAAC,iBAAiB,CAAC;IAC/B,IAAI,QAAQ,CAAC,mBAAmB,CAAC;IACjC,IAAI,QAAQ,CAAC,YAAY,CAAC;CAC7B,CAAC;;AAEF,IAAa,aAAa,GAAa,IAAI,QAAQ,CAAC,MAAM,EAAE,kBAAkB,EAAE;IAC5E,IAAI,QAAQ,CAAC,MAAM,CAAC;IACpB,IAAI,QAAQ,CAAC,WAAW,CAAC;IACzB,IAAI,QAAQ,CAAC,aAAa,CAAC;IAC3B,IAAI,QAAQ,CAAC,aAAa,CAAC;IAC3B,IAAI,QAAQ,CAAC,cAAc,CAAC;IAC5B,IAAI,QAAQ,CAAC,cAAc,CAAC;IAC5B,IAAI,QAAQ,CAAC,aAAa,CAAC;IAC3B,IAAI,QAAQ,CAAC,mBAAmB,CAAC;IACjC,IAAI,QAAQ,CAAC,iBAAiB,CAAC;IAC/B,IAAI,QAAQ,CAAC,WAAW,CAAC;IACzB,IAAI,QAAQ,CAAC,YAAY,CAAC;IAC1B,IAAI,QAAQ,CAAC,iBAAiB,CAAC;CAClC,CAAC;;AAEF,IAAa,cAAc,GAAa,IAAI,QAAQ,CAAC,OAAO,EAAE,kBAAkB,EAAE;IAC9E,IAAI,QAAQ,CAAC,mBAAmB,CAAC;IACjC,IAAI,QAAQ,CAAC,mBAAmB,CAAC;IACjC,IAAI,QAAQ,CAAC,cAAc,CAAC;IAC5B,IAAI,QAAQ,CAAC,cAAc,CAAC;IAC5B,IAAI,QAAQ,CAAC,eAAe,CAAC;IAC7B,IAAI,QAAQ,CAAC,eAAe,CAAC;IAC7B,IAAI,QAAQ,CAAC,gBAAgB,CAAC;IAC9B,IAAI,QAAQ,CAAC,gBAAgB,CAAC;IAC9B,IAAI,QAAQ,CAAC,kBAAkB,CAAC;IAChC,IAAI,QAAQ,CAAC,aAAa,CAAC;IAC3B,IAAI,QAAQ,CAAC,YAAY,CAAC;CAC7B,CAAC;;AAEF,IAAa,eAAe,GAAa,IAAI,QAAQ,CAAC,SAAS,EAAE,mBAAmB,EAAE;IAClF,IAAI,QAAQ,CAAC,eAAe,CAAC;IAC7B,IAAI,QAAQ,CAAC,eAAe,CAAC;IAC7B,IAAI,QAAQ,CAAC,eAAe,CAAC;IAC7B,IAAI,QAAQ,CAAC,cAAc,CAAC;CAC/B,CAAC;;AAEF,IAAa,kBAAkB,GAAa,IAAI,QAAQ,CAAC,WAAW,EAAE,sBAAsB,EAAE,EAAE,EAAE,EAAE,EAAE,UAAU,CAAC;;AAEjH,IAAa,kBAAkB,GAAa,IAAI,QAAQ,CAAC,WAAW,EAAE,uBAAuB,EAAE,EAAE,EAAE,EAAE,EAAE,WAAW,CAAC;AAEnH;IAAA;KAuBC;;;;IAlBU,wCAAK;;;IAAZ;;;YACQ,GAAG,GAAG,0CAA0C;QACpD,IAAI,IAAI,CAAC,MAAM,EAAE;;gBACb,KAAmB,IAAA,KAAAA,SAAA,IAAI,CAAC,MAAM,CAAA,gBAAA,4BAAE;oBAA3B,IAAM,IAAI,WAAA;oBACX,GAAG,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;iBACvB;;;;;;;;;SACJ;QACD,GAAG,IAAI,QAAQ,CAAC;QAChB,OAAO,GAAG,CAAC;KACd;IAED,sBAAI,2CAAK;;;;QAAT;YACI,OAAO,IAAI,CAAC,MAAM,CAAC;SACtB;;;;;QAED,UAAU,KAAa;YACnB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;SACvB;;;OAJA;;gBAlBJ,UAAU;;IAuBX,+BAAC;CAvBD,IAuBC;;;;;;IApBG,0CAAuB;;;;;;;ACpF3B;IAIA;KAQC;;gBARA,QAAQ,SAAC;oBACN,YAAY,EAAE,CAAC,mBAAmB,CAAC;oBACnC,OAAO,EAAE,EAAE;oBACX,OAAO,EAAE,CAAC,mBAAmB,CAAC;oBAC9B,SAAS,EAAE,CAAC,wBAAwB,CAAC;oBACrC,OAAO,EAAE,CAAC,gBAAgB,CAAC;iBAC9B;;IAED,uBAAC;CARD;;;;;;;;;;;;;;"}